class
@CLASS~
HelloWorld
@ID~
{
@LEFT_CURLY_B~
public
@PUBLIC~
static
@STATIC~
void
@VOID~
main
@MAIN~
(
@LEFT_ROUND_B~
String
@STRING~
[
@LEFT_SQUARE_B~
]
@RIGHT_SQUARE_B~
args
@ID~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
System.out.println
@SYSTEM.OUT.PRINTLN~
(
@LEFT_ROUND_B~
new
@NEW~
BinaryClass
@ID~
(
@LEFT_ROUND_B~
)
@RIGHT_ROUND_B~
.
@DOT~
binarySearch
@ID~
(
@LEFT_ROUND_B~
10
@INTEGRAL_LITERAL~
)
@RIGHT_ROUND_B~
)
@RIGHT_ROUND_B~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
}
@RIGHT_CURLY_B~
class
@CLASS~
BinaryNode
@ID~
extends
@EXTENDS~
BinaryClass
@ID~
{
@LEFT_CURLY_B~
float
@FLOAT~
[
@LEFT_SQUARE_B~
]
@RIGHT_SQUARE_B~
data
@ID~
;
@SEMICOLON~
int
@INT~
size
@ID~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
class
@CLASS~
BinaryClass
@ID~
{
@LEFT_CURLY_B~
float
@FLOAT~
[
@LEFT_SQUARE_B~
]
@RIGHT_SQUARE_B~
data
@ID~
;
@SEMICOLON~
int
@INT~
size
@ID~
;
@SEMICOLON~
BinaryClass
@ID~
(
@LEFT_ROUND_B~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
data
@ID~
=
@ASSIGNMENT~
new
@NEW~
float
@FLOAT~
[
@LEFT_SQUARE_B~
5
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
0
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
1
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
1
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
2
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
2
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
3
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
3
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
4
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
4
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
5
@INTEGRAL_LITERAL~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
public
@PUBLIC~
boolean
@BOOLEAN~
init
@ID~
(
@LEFT_ROUND_B~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
data
@ID~
=
@ASSIGNMENT~
new
@NEW~
float
@FLOAT~
[
@LEFT_SQUARE_B~
5
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
0
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
1
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
1
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
2
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
2
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
3
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
3
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
4
@INTEGRAL_LITERAL~
;
@SEMICOLON~
data
@ID~
[
@LEFT_SQUARE_B~
4
@INTEGRAL_LITERAL~
]
@RIGHT_SQUARE_B~
=
@ASSIGNMENT~
5
@INTEGRAL_LITERAL~
;
@SEMICOLON~
return
@RETURN~
true
@TRUE~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
public
@PUBLIC~
boolean
@BOOLEAN~
binarySearch
@ID~
(
@LEFT_ROUND_B~
int
@INT~
key
@ID~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
int
@INT~
low
@ID~
;
@SEMICOLON~
int
@INT~
high
@ID~
;
@SEMICOLON~
int
@INT~
middle
@ID~
;
@SEMICOLON~
boolean
@BOOLEAN~
res
@ID~
;
@SEMICOLON~
low
@ID~
=
@ASSIGNMENT~
0
@INTEGRAL_LITERAL~
;
@SEMICOLON~
high
@ID~
=
@ASSIGNMENT~
size
@ID~
-
@MINUS~
1
@INTEGRAL_LITERAL~
;
@SEMICOLON~
while
@WHILE~
(
@LEFT_ROUND_B~
high
@ID~
<
@LESSTHAN~
low
@ID~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
middle
@ID~
=
@ASSIGNMENT~
low
@ID~
+
@PLUS~
high
@ID~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
res
@ID~
=
@ASSIGNMENT~
false
@FALSE~
;
@SEMICOLON~
return
@RETURN~
res
@ID~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
}
@RIGHT_CURLY_B~
eol
@EOL~