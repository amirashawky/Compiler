class
@CLASS~
Factorial
@ID~
{
@LEFT_CURLY_B~
public
@PUBLIC~
static
@STATIC~
void
@VOID~
main
@MAIN~
(
@LEFT_ROUND_B~
String
@STRING~
[
@LEFT_SQUARE_B~
]
@RIGHT_SQUARE_B~
a
@ID~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
System.out.println
@SYSTEM.OUT.PRINTLN~
(
@LEFT_ROUND_B~
new
@NEW~
Fac
@ID~
(
@LEFT_ROUND_B~
)
@RIGHT_ROUND_B~
.
@DOT~
ComputeFac
@ID~
(
@LEFT_ROUND_B~
10
@INTEGRAL_LITERAL~
)
@RIGHT_ROUND_B~
)
@RIGHT_ROUND_B~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
}
@RIGHT_CURLY_B~
class
@CLASS~
Fac
@ID~
{
@LEFT_CURLY_B~
public
@PUBLIC~
int
@INT~
ComputeFac
@ID~
(
@LEFT_ROUND_B~
int
@INT~
num
@ID~
)
@RIGHT_ROUND_B~
{
@LEFT_CURLY_B~
int
@INT~
num_aux
@ID~
;
@SEMICOLON~
if
@IF~
(
@LEFT_ROUND_B~
num
@ID~
<
@LESSTHAN~
1
@INTEGRAL_LITERAL~
)
@RIGHT_ROUND_B~
num_aux
@ID~
=
@ASSIGNMENT~
1
@INTEGRAL_LITERAL~
;
@SEMICOLON~
else
@ELSE~
num_aux
@ID~
=
@ASSIGNMENT~
num
@ID~
*
@MULTIPLY~
(
@LEFT_ROUND_B~
this
@THIS~
.
@DOT~
ComputeFac
@ID~
(
@LEFT_ROUND_B~
num
@ID~
-
@MINUS~
1
@INTEGRAL_LITERAL~
)
@RIGHT_ROUND_B~
)
@RIGHT_ROUND_B~
;
@SEMICOLON~
return
@RETURN~
num_aux
@ID~
;
@SEMICOLON~
}
@RIGHT_CURLY_B~
}
@RIGHT_CURLY_B~
eol
@EOL~